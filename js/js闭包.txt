理解：
1.函数可以使用函数之外定义的变量。
2.闭包就是能够读取其他函数内部变量的函数。
3.由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。
4.闭包就是将函数内部和函数外部连接起来的一座桥梁。
	function f1(){
　　　　n=999;
　　　　function f2(){
　　　　　　alert(n);
　　　　}
　　　　return f2;

　　}
　　var result=f1();
　　result(); // 999
用途：
	1.可以读取函数内部的变量。
	2.让这些变量的值始终保持在内存中。

应用场景：
	1.保护函数内的变量安全。以最开始的例子为例，函数a中i只有函数b才能访问，而无法通过其他途径访问到，因此保护了i的安全性。
	2.在内存中维持一个变量。依然如前例，由于闭包，函数a中i的一直存在于内存中，因此每次执行c()，都会给i自加1。
	3.通过保护变量的安全实现JS私有属性和私有方法（不能被外部访问）私有属性和方法在Constructor外是无法被访问的
	function Constructor(...) {  
	  var that = this;  
	  var membername = value; 
	  function membername(...) {...}
	}

	以上3点是闭包最基本的应用场景，很多经典案例都源于此。

示例：	

	例子1：
	function f1(){
　　　　var n=999;
　　　　nAdd=function(){n+=1} //全局变量，匿名函数
　　　　function f2(){
　　　　　　alert(n);
　　　　}
　　　　return f2;
　　}
　　var result=f1();
　　result(); // 999
　　nAdd();
　　result(); // 1000

	例子2：
	var name = "The Window";   
　　var object = {   
　　　　name : "My Object",   
　　　　getNameFunc : function(){   
　　　　　　return function(){   
　　　　　　　　return this.name;   
　　　　　};   
　　　　}   
	};   
	alert(object.getNameFunc()());  //The Window

	例子3：
	function outerFun()
	{
	 var a=0;
	 function innerFun()
	 {
	  a++;
	  alert(a);
	 }
	 return innerFun;  //注意这里
	}
	var obj=outerFun();
	obj();  //结果为1
	obj();  //结果为2
	var obj2=outerFun();
	obj2();  //结果为1
	obj2();  //结果为2	

参考：
	http://www.cnblogs.com/uedt/archive/2010/10/28/1863389.html	
